@startuml

title Third party transferring AZTEC notes with holdProof and executeHold.

actor "Note Sender" as sender
actor "Notary" as notary
participant asset as "zero-knowledge asset" <<Contract>>
participant ace as "AZTEC Cryptography Engine (ACE)" <<Contract>>
participant registry as "Note Registry" <<Contract>>
actor "Note Recipient" as recipient

sender -> sender : ([noteHash]) => inputNotes
sender -> sender : ([publicKey, value]) => outputNotes
sender -> sender : JoinSplitProof (inputNotes,\noutputNotes,\nassetContractAddress) => proof
note right : the proof sender needs to be the zk asset
sender -> sender : proof.encodeABI (assetContractAddress) => proofData
sender -> sender : signHoldForProof(assetAddress,\nproofData, notaryAddress, expirationDateTime,\nlockHash, senderPrivateKey) => holdSignature

sender -> asset : holdProof (proofId, proofData,\nnotaryAddress, expirationDateTime,\nlockHash, holdSignature)
activate asset
asset -> ace : validateProof (proofId, notaryAddress, proofData) => proofOutput
activate ace
return
asset -> asset : validateSignature(holdSignature) => sender
asset -> asset : extractNotes(proofOutput) => inputNotes
asset -> asset : holdNotes(inputNotes)
return event NewHold(holdId, sender, noteHashes, notary, expirationDateTime, lockHash)


notary -> asset : executeHold(holdId)
activate asset
asset -> asset : confidentialTransferFrom (proofId, proofOutput)
note right : spends sender's input notes and creates recipient, unpent, output, notes for.
asset -> ace : updateNoteRegistry(proofId, proofOutput, assetContractAddress);
activate ace
ace -> registry : behaviour.updateNoteRegistry(proofId, proofOutput)
activate registry
return
return

asset -> recipient : CreateNote(noteHash, owner, metadata)
note right: watches for asset events
activate recipient
deactivate recipient
recipient -> recipient : fromEventLog(metadata, privateKey) => note
return

@enduml
